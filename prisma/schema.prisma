generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model List {
  id          String   @id @default(uuid())
  title       String
  description String?
  color       String?  @default("#3b82f6") // Default blue color
  order       Int      @default(0)
  creatorId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creator     User     @relation("CreatedLists", fields: [creatorId], references: [id], onDelete: Cascade)
  tasks       Task[]   @relation("ListTasks")

  @@map("list")
}

model Subtask {
  id        String   @id @default(uuid())
  title     String
  parentId  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Task      Task     @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model Task {
  id                           String    @id @default(uuid())
  title                        String
  description                  String?
  isUrgent                     Boolean   @default(false)
  isImportant                  Boolean   @default(false)
  assignedToId                 String?
  listId                       String?   // Opsiyonel liste ID'si
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt
  completed                    Boolean   @default(false)
  dueDate                      DateTime?
  order                        Int       @default(0)
  creatorId                    String
  creator                      User @relation("CreatedTasks", fields: [creatorId], references: [id], onDelete: Cascade)
  assignedTo                   User? @relation("AssignedTasks", fields: [assignedToId], references: [id], onDelete: SetNull)
  list                         List? @relation("ListTasks", fields: [listId], references: [id], onDelete: SetNull)
  subtasks                     Subtask[]
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model User {
  id                           String    @id
  name                         String
  email                        String    @unique
  emailVerified                Boolean
  image                        String?
  createdAt                    DateTime
  updatedAt                    DateTime
  account                      Account[]
  session                      Session[]
  createdTasks Task[] @relation("CreatedTasks")
  assignedTasks Task[] @relation("AssignedTasks")
  createdLists List[] @relation("CreatedLists")
  @@map("user")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?
  @@map("verification")
}
